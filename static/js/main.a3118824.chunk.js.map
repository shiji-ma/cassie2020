{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","validation","data","ciphertext","plaintext","useState","welcome","cryptograph","complete","display","setDisplay","progress","setProgress","className","id","onSubmit","event","fname","target","value","toLowerCase","bday","preventDefault","type","length","answer","prevState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4OAoIeA,MAjIf,WACE,IAAMC,EAAsB,YAAtBA,EAAyC,aACzCC,EAAO,CACX,CACEC,WAAY,0BACZC,UAAW,2BAEb,CACED,WAAY,yCACZC,UAAW,wBAEb,CACED,WAAY,0BACZC,UAAW,MAEb,CACED,WAAY,QACZC,UAAW,SAEb,CACED,WAAY,2CACZC,UAAW,SAEb,CACED,WACE,8EACFC,UAAW,8BA1BF,EA8BiBC,mBAAS,CACrCJ,WAAY,QACZK,QAAS,SACTC,YAAa,SACbC,SAAU,WAlCC,mBA8BNC,EA9BM,KA8BGC,EA9BH,OAqCmBL,mBAAS,GArC5B,mBAqCNM,EArCM,KAqCIC,EArCJ,KAsFb,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,UAAlB,0CACA,6BAASC,GAAG,aAAaD,UAAWJ,EAAQR,YAC1C,0BAAMc,SAnDK,SAAAC,GACf,IAAMC,EAAQD,EAAME,OAAOD,MAAME,MAAMC,cACjCC,EAAOL,EAAME,OAAOG,KAAKF,MAC/BH,EAAME,OAAOD,MAAME,MAAQ,KAC3BH,EAAME,OAAOG,KAAKF,MAAQ,KAEtBF,IAAUhB,GAAoBoB,IAASpB,GACzCS,EAAW,CACTT,WAAY,SACZK,QAAS,QACTC,YAAa,SACbC,SAAU,WAGdQ,EAAMM,mBAsCA,0CACA,2BAAOR,GAAG,QAAQS,KAAK,SACvB,wCACA,2BAAOT,GAAG,OAAOS,KAAK,SACtB,6BACA,2BAAOV,UAAU,SAASU,KAAK,SAASJ,MAAM,QAIlD,6BAASL,GAAG,UAAUD,UAAWJ,EAAQH,SACvC,0BAAMS,SA7CE,SAAAC,GACZN,EAAW,CACTT,WAAY,SACZK,QAAS,SACTC,YAAa,QACbC,SAAU,WAEZQ,EAAMM,mBAuCA,8CACA,yCAAepB,EAAKsB,OAApB,iCACA,6BACA,2BAAOX,UAAU,SAASU,KAAK,SAASJ,MAAM,QAIlD,6BAASL,GAAG,cAAcD,UAAWJ,EAAQF,aAC3C,0BAAMQ,SA5CE,SAAAC,GACZ,IAAMS,EAAST,EAAME,OAAOd,UAAUe,MAAMC,cAC5CJ,EAAME,OAAOd,UAAUe,MAAQ,KAE3BM,IAAWvB,EAAKS,GAAUP,YACxBO,EAAWT,EAAKsB,OAAS,EAC3BZ,GAAY,SAAAc,GAAS,OAAIA,EAAY,MAErCd,EAAY,GACZF,EAAW,CACTT,WAAY,SACZK,QAAS,SACTC,YAAa,SACbC,SAAU,YAIhBQ,EAAMM,mBA4BA,wBAAIR,GAAG,cAAcZ,EAAKS,GAAUR,YACpC,2BAAOW,GAAG,YAAYS,KAAK,SAC3B,6BACA,2BAAOV,UAAU,SAASU,KAAK,SAASJ,MAAM,QAIlD,6BAASL,GAAG,WAAWD,UAAWJ,EAAQD,UACxC,qDAEE,6BAFF,sBC9GYmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a3118824.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const validation = { fname: \"cassandra\", bday: \"1995-08-16\" };\n  const data = [\n    {\n      ciphertext: \"seye lufituaeb evah uoy\",\n      plaintext: \"you have beautiful eyes\"\n    },\n    {\n      ciphertext: \"1805130513020518 200805 01141923051819\",\n      plaintext: \"remember the answers\"\n    },\n    {\n      ciphertext: \"1/3*[sqrt(196)/2+(2^5)]\",\n      plaintext: \"13\"\n    },\n    {\n      ciphertext: \"bpgrg\",\n      plaintext: \"octet\"\n    },\n    {\n      ciphertext: \"0110000101110011011000110110100101101001\",\n      plaintext: \"ascii\"\n    },\n    {\n      ciphertext:\n        \"104097112112121032108097116101032118097108101110116105110101039115032060051\",\n      plaintext: \"happy late valentine's <3\"\n    }\n  ];\n\n  const [display, setDisplay] = useState({\n    validation: \"shown\",\n    welcome: \"hidden\",\n    cryptograph: \"hidden\",\n    complete: \"hidden\"\n  });\n\n  const [progress, setProgress] = useState(0);\n\n  const validate = event => {\n    const fname = event.target.fname.value.toLowerCase();\n    const bday = event.target.bday.value;\n    event.target.fname.value = null;\n    event.target.bday.value = null;\n\n    if (fname === validation.fname && bday === validation.bday) {\n      setDisplay({\n        validation: \"hidden\",\n        welcome: \"shown\",\n        cryptograph: \"hidden\",\n        complete: \"hidden\"\n      });\n    }\n    event.preventDefault();\n  };\n\n  const start = event => {\n    setDisplay({\n      validation: \"hidden\",\n      welcome: \"hidden\",\n      cryptograph: \"shown\",\n      complete: \"hidden\"\n    });\n    event.preventDefault();\n  };\n\n  const check = event => {\n    const answer = event.target.plaintext.value.toLowerCase();\n    event.target.plaintext.value = null;\n\n    if (answer === data[progress].plaintext) {\n      if (progress < data.length - 1) {\n        setProgress(prevState => prevState + 1);\n      } else {\n        setProgress(0);\n        setDisplay({\n          validation: \"hidden\",\n          welcome: \"hidden\",\n          cryptograph: \"hidden\",\n          complete: \"shown\"\n        });\n      }\n    }\n    event.preventDefault();\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">a special puzzle for a special someone</header>\n      <section id=\"validation\" className={display.validation}>\n        <form onSubmit={validate}>\n          <h3>first name</h3>\n          <input id=\"fname\" type=\"text\" />\n          <h3>birthday</h3>\n          <input id=\"bday\" type=\"date\" />\n          <br />\n          <input className=\"submit\" type=\"submit\" value=\">\" />\n        </form>\n      </section>\n\n      <section id=\"welcome\" className={display.welcome}>\n        <form onSubmit={start}>\n          <h1>welcome peach,</h1>\n          <h3>there are {data.length} puzzles to solve. good luck!</h3>\n          <br />\n          <input className=\"submit\" type=\"submit\" value=\">\" />\n        </form>\n      </section>\n\n      <section id=\"cryptograph\" className={display.cryptograph}>\n        <form onSubmit={check}>\n          <h2 id=\"ciphertext\">{data[progress].ciphertext}</h2>\n          <input id=\"plaintext\" type=\"text\" />\n          <br />\n          <input className=\"submit\" type=\"submit\" value=\">\" />\n        </form>\n      </section>\n\n      <section id=\"complete\" className={display.complete}>\n        <h3>\n          thanks peach, you too!\n          <br />\n          less than three\n        </h3>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}